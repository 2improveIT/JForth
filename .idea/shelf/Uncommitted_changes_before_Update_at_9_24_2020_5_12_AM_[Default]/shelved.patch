Index: JForth_jar/run.bat
===================================================================
--- JForth_jar/run.bat	(revision 96fd9775f4c5987a9bd39b22dfe9988642d151e4)
+++ JForth_jar/run.bat	(revision 96fd9775f4c5987a9bd39b22dfe9988642d151e4)
@@ -1,5 +0,0 @@
-"C:\Program Files\Java\jdk1.8.0_231\bin\java.exe" -Dfile.encoding=windows-1252 -jar JForth.jar
-
-REM "C:\Program Files\Java\jdk-10\bin\java" -Dfile.encoding=windows-1252 -jar JForth.jar
-
-REM "C:\Program Files\RedHat\java-1.8.0-openjdk-1.8.0.144-1\bin\java.exe" -jar JForth.jar
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Created by .ignore support plugin (hsz.mobi)\r\n/out/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision 96fd9775f4c5987a9bd39b22dfe9988642d151e4)
+++ .gitignore	(date 1600912624617)
@@ -1,2 +1,4 @@
 # Created by .ignore support plugin (hsz.mobi)
 /out/
+/JForth.rar
+/JForth_jar/
\ No newline at end of file
Index: JForth.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_8\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Test\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/resource\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/gen\" isTestSource=\"false\" generated=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/JForth_jar\" isTestSource=\"false\" generated=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/out/production\" />\r\n    </content>\r\n    <content url=\"file://$MODULE_DIR$/out\" />\r\n    <content url=\"file://$MODULE_DIR$/out/artifacts\" />\r\n    <content url=\"file://$MODULE_DIR$/out/production\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"1.8\" jdkType=\"JavaSDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"org.apache.commons:commons-math3:3.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"com.cedarsoftware:json-io:4.9.10\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"net.java.dev.jna:jna:4.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"org.fusesource.jansi:jansi:1.15\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"scala-sdk-2.12.1\" level=\"application\" />\r\n    <orderEntry type=\"module-library\" scope=\"TEST\">\r\n      <library name=\"JUnit4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-4.12.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/hamcrest-core-1.3.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" name=\"cmulex\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"cmu_us_kal-1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"cmu_time_awb-1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"cmutimelex\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"mathIT\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"asciiart-core-1.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"scala-sdk-2.12.1\" level=\"application\" />\r\n    <orderEntry type=\"library\" name=\"javax.xml.bind:jaxb-api:2.3.0\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- JForth.iml	(revision 96fd9775f4c5987a9bd39b22dfe9988642d151e4)
+++ JForth.iml	(date 1600912512921)
@@ -7,7 +7,7 @@
       <sourceFolder url="file://$MODULE_DIR$/Test" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/resource" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/JForth_jar" isTestSource="false" generated="true" />
+      <excludeFolder url="file://$MODULE_DIR$/JForth_jar" />
       <excludeFolder url="file://$MODULE_DIR$/out/production" />
     </content>
     <content url="file://$MODULE_DIR$/out" />
@@ -19,7 +19,6 @@
     <orderEntry type="library" name="com.cedarsoftware:json-io:4.9.10" level="project" />
     <orderEntry type="library" name="net.java.dev.jna:jna:4.4.0" level="project" />
     <orderEntry type="library" name="org.fusesource.jansi:jansi:1.15" level="project" />
-    <orderEntry type="library" name="scala-sdk-2.12.1" level="application" />
     <orderEntry type="module-library" scope="TEST">
       <library name="JUnit4">
         <CLASSES>
@@ -36,7 +35,6 @@
     <orderEntry type="library" name="cmutimelex" level="project" />
     <orderEntry type="library" name="mathIT" level="project" />
     <orderEntry type="library" name="asciiart-core-1.0.0" level="project" />
-    <orderEntry type="library" name="scala-sdk-2.12.1" level="application" />
     <orderEntry type="library" name="javax.xml.bind:jaxb-api:2.3.0" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: Test/TestCases.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jforth.JForth;\r\nimport jforth.RuntimeEnvironment;\r\nimport jforth.Utilities;\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\nimport tools.StringStream;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\n\r\nimport static jforth.PolynomialParser.parsePolynomial;\r\n\r\n/**\r\n * Created by Administrator on 4/15/2017.\r\n */\r\npublic class TestCases\r\n{\r\n    private String check (String prg, String call)\r\n    {\r\n        StringStream _ss = new StringStream();\r\n        JForth _forth = new JForth(_ss.getPrintStream(), RuntimeEnvironment.TEST);\r\n//        _forth.setPrintStream(_ss.getPrintStream());\r\n        _forth.singleShot(prg);\r\n        if (call != null)\r\n        {\r\n            _ss.clear();\r\n            _forth.singleShot(call);\r\n        }\r\n        return _ss.toString();\r\n    }\r\n    \r\n    private void shoudBeOK (String a, String s)\r\n    {\r\n        final String EP = \" OK\\nJFORTH> \";\r\n        Assert.assertEquals(a+EP, s);\r\n    }\r\n\r\n    private void shoudBe (String a, String s)\r\n    {\r\n        Assert.assertEquals(a, s);\r\n    }\r\n\r\n    @Test\r\n    public void TestConversion()\r\n    {\r\n        String s = check (\"hex a0 dec\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"160\" ,s);\r\n        s = check (\"dec 65535 hex\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"FFFF\" ,s);\r\n        s = check (\"bin 10101010 hex\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"AA\" ,s);\r\n        s = check (\"hex 73 bin\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"1110011\" ,s);\r\n        s = check (\"3 setbase 10 10 20 + +\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"110\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCrossProduct()\r\n    {\r\n        String s = check (\"{1,2,3} {4,5,6} crossP\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{-3,6,-3}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRoll()\r\n    {\r\n        String s = check (\"1 2 3 4 2 roll\", \". . . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"2431\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDotProduct()\r\n    {\r\n        String s = check (\"{1,2,3} {4,5,6} dotP\", \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"32\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestImmediate()\r\n    {\r\n        String s = check (\"10 0 do i .\", \"loop\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"0123456789\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPlusLoop()\r\n    {\r\n        String s = check (\": test 10 0 do i . 2 +loop 10 0 do i . 3 +loop ;\", \"test\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"024680369\" ,s);\r\n    }\r\n\r\n\r\n    @Test\r\n    public void TestPrg2()\r\n    {\r\n        String s = check (\": test 10 0 do i . loop ;\", \"test\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"0123456789\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg3()\r\n    {\r\n        String s = check (\": test variable hello hello ! hello @ length hello @ ;\",\r\n                \"{1,2,3,4} test . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{1,2,3,4}4\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg4()\r\n    {\r\n        String s = check (\": test variable hello hello ! hello @ length fact ;\",\r\n                \"{1,2,3,4} test .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"24\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg5()\r\n    {\r\n        String s = check (\": test variable hello hello ! hello @ length fact 0 ;\",\r\n                \"{1,2,3,4} test . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"024\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg6()\r\n    {\r\n        String s = check (\": test variable hello hello ! hello @ length 24 0 do i . loop ;\",\r\n                \"{1,2,3,4} test .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"012345678910111213141516171819202122234\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg7()\r\n    {\r\n        String s = check (\": test variable hello hello ! hello @ length fact 0 do i . loop ;\",\r\n                \"{1,2,3} test\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"012345\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrg_Permute()\r\n    {\r\n        String result = \"1 -JFORTH> {1,4,3,2}\\r\\n\" +\r\n                \"2 -JFORTH> {2,1,3,4}\\r\\n\" +\r\n                \"3 -JFORTH> {3,1,4,2}\\r\\n\" +\r\n                \"4 -JFORTH> {4,1,3,2}\\r\\n\" +\r\n                \"5 -JFORTH> {1,2,4,3}\\r\\n\" +\r\n                \"6 -JFORTH> {2,4,1,3}\\r\\n\" +\r\n                \"7 -JFORTH> {3,2,1,4}\\r\\n\" +\r\n                \"8 -JFORTH> {4,2,1,3}\\r\\n\" +\r\n                \"9 -JFORTH> {1,3,4,2}\\r\\n\" +\r\n                \"10 -JFORTH> {2,3,1,4}\\r\\n\" +\r\n                \"11 -JFORTH> {3,4,1,2}\\r\\n\" +\r\n                \"12 -JFORTH> {4,3,1,2}\\r\\n\" +\r\n                \"13 -JFORTH> {1,4,2,3}\\r\\n\" +\r\n                \"14 -JFORTH> {2,1,4,3}\\r\\n\" +\r\n                \"15 -JFORTH> {3,1,2,4}\\r\\n\" +\r\n                \"16 -JFORTH> {4,1,2,3}\\r\\n\" +\r\n                \"17 -JFORTH> {1,2,3,4}\\r\\n\" +\r\n                \"18 -JFORTH> {2,4,3,1}\\r\\n\" +\r\n                \"19 -JFORTH> {3,2,4,1}\\r\\n\" +\r\n                \"20 -JFORTH> {4,2,3,1}\\r\\n\" +\r\n                \"21 -JFORTH> {1,3,2,4}\\r\\n\" +\r\n                \"22 -JFORTH> {2,3,4,1}\\r\\n\" +\r\n                \"23 -JFORTH> {3,4,2,1}\\r\\n\" +\r\n                \"24 -JFORTH> {4,3,2,1}\\r\\n\" +\r\n                \" OK\\nJFORTH> \";\r\n        String s = check (\": test variable hello hello ! \" +\r\n                        \"hello @ length fact 0 do i 1 + . \" +\r\n                        \"sp \\\"-JFORTH>\\\" . sp hello @ i permute . cr loop ;\\n\",\r\n                \"{1,2,3,4} test\");\r\n        System.out.println(s);\r\n        shoudBe (result, s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStringRev()\r\n    {\r\n        String s = check (\"\\\"hello\\\" rev\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"olleh\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSortString  ()\r\n    {\r\n        String s = check (\"\\\"laladummthequickbrownfoxjumpsoverthelazydog\\\" sort unique toStr\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"abcdefghijklmnopqrstuvwxyz\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPrimFac  ()\r\n    {\r\n        String s = check (\"{2,3,5,7,11,13,17,19,23} prod factor 8 factor\",\r\n                \". .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{2,2,2}{2,3,5,7,11,13,17,19,23}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSub()\r\n    {\r\n        String s = check (\"12 11 - 12L 11 - 12L 11.0 - 12.0 11 -\",\r\n                \". . . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"1111\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBitsBig()\r\n    {\r\n        String s = check (\"2 77 pow dup toBits toBig\",\r\n                \". sp .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"151115727451828646838272 151115727451828646838272\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPolyMult()\r\n    {\r\n        String s = check (\"x^2+x x^2+x *\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"x^2+2x^3+x^4\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPolyDiv()\r\n    {\r\n        String s = check (\"4x^5+3x^2 x^2-6 1 pick 1 pick / \",\r\n                \". .\\\" +(\\\" mod . .\\\" )\\\"\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"3+24x+4x^3+(18+144x)\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPolyDiv2()\r\n    {\r\n        String s = check (\"-13x^7+3x^5 x^2-6 /mod \",\r\n                \". sp .\\\" rest:\\\" .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"-450x-75x^3-13x^5 rest:1-2700x\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSimpleCalc()\r\n    {\r\n        String s = check (\"12.0 7 / 100L * dup type \",\r\n                \". sp .\\\" - \\\" .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"BigInteger - 100\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestTrig()\r\n    {\r\n        String s = check (\"10 dup dup\",\r\n                \"sin . sp cos . sp tan .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"-0.5440211108893698 -0.8390715290764524 0.6483608274590866\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPolyParser()\r\n    {\r\n        double[] poly = parsePolynomial(\"8x^4+10.7+34x^2-7x+7x-9x^4\", 10);\r\n        String s = Arrays.toString(poly);\r\n        shoudBe (\"[10.7, 0.0, 34.0, 0.0, -1.0]\", s);\r\n    }\r\n\r\n    @Test\r\n    public void TestHex1()\r\n    {\r\n        String s = check (\"hex 0a 14 *\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"C8\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDefinedOp()\r\n    {\r\n        String s = check (\": *+ * + ;\",\r\n                \"5 6 7 *+ .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"47\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestVariable()\r\n    {\r\n        String s = check (\"variable x \" +\r\n                        \"3 x !\",\r\n                \"x @ .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"3\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestConstant()\r\n    {\r\n        String s = check (\"4711 constant bla\",\r\n                \"bla .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"4711\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestTuck()\r\n    {\r\n        String s = check (\"1 2 3 4 5 6 tuck\",\r\n                \". . . . . . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"6564321\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestIf()\r\n    {\r\n        String s = check (\": konto dup abs . 0< if \\\"soll\\\" . else \\\"haben\\\" . then ;\",\r\n                \"0 konto -1 konto\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"0haben1soll\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRecurse()\r\n    {\r\n        String s = check (\": rtest dup 0< if sp \\\"stop\\\" . else 1 - dup sp . recurse then ;\",\r\n                \"6 rtest\");\r\n        System.out.println(s);\r\n        shoudBeOK (\" 5 4 3 2 1 0 -1 stop\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginUntilCompiled()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\": test 0 begin dup . 1+ dup 5 = until ;\",\r\n                \"test\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"01234\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginUntilImmediate()\r\n    {\r\n        String s = check (\"0 begin dup . 6 + dup 99 >\",\r\n                \"until\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"06121824303642485460667278849096\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginAgainCompiled()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\": test 0 1 2 3 4 5 begin . again ;\",\r\n                \"test\");\r\n        System.out.println(s);\r\n        shoudBe (\"543210test word execution or stack error\\nJFORTH> \", s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginAgainImmediate()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\"0 1 2 3 4 5 begin .\",\r\n                \"again\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"543210\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginAgainIfThen()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\": test 0 1 2 3 4 5 6 7 8 9 10 begin . dup 5 < if \\\"-\\\" . then again ;\",\r\n                \"test\");\r\n        System.out.println(s);\r\n        shoudBe (\"1098765-4-3-2-1-0test word execution or stack error\\nJFORTH> \", s);\r\n    }\r\n\r\n    @Test\r\n    public void TestBeginAgainBreak()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\": test 0 1 2 3 4 5 6 7 8 9 10 begin . dup 5 < if break then again ;\",\r\n                \"test\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"1098765\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestTwoWords()\r\n    {\r\n        // : test 0 begin dup . 1+ again ;\r\n        String s = check (\": test 0 1 2 3 4 5 6 7 8 9 10 begin . dup 5 < if break then again ; \" +\r\n                        \": fump 10 spaces \\\"lala\\\" . ; \" +\r\n                        \": check test fump ;\",\r\n                    \"check\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"1098765          lala\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestAddFractions()\r\n    {\r\n        String s = check (\"1/2 1/8 1/32 1/128\",\r\n                \"+ + + .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"85/128\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStringOpAddMult()\r\n    {\r\n        String s = check (\"\\\"lala\\\" \\\"dumm\\\"\",\r\n                \"+ 2 * .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"laladummlaladumm\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDSCreate()\r\n    {\r\n        String s = check (\"{1.2,2.3,3,4,4.5} type\",\r\n                \".s\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"DoubleSequence \" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestMatrixToList()\r\n    {\r\n        String s = check (\"{{1,2,3}{4,5}{6,7,8,9}} toNumList\",\r\n                \". . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{6,7,8,9}{4,5,0,0}{1,2,3,0}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestToMatrix()\r\n    {\r\n        String s = check (\"{1,2,3} {4,5,6,7,8,9} {3,4,55,7,99} toM\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{{3,4,55,7,99,0}{4,5,6,7,8,9}{1,2,3,0,0,0}}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDeterminant()\r\n    {\r\n        String s = check (\"{{1,2,3}{4,5,6}{7,8,1}} detM 3 round\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"24\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDecompLUP()\r\n    {\r\n        String s = check (\" {{1,2,3}{4,5,6}{7,8,1}} lupM\",\r\n                \". . .\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"{{0,0,1}{1,0,0}{0,1,0}}{{7,8,1}{0,0.8571,2.8571}{0,0,4}}{{1,0,0}{0.1429,1,0}{0.5714,0.5,1}}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestFitpolyRound()\r\n    {\r\n        String s = check (\"{1,1,2,4,3,9} fitPoly 3 round\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"x^2\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestlagPoly()\r\n    {\r\n        String s = check (\"{1,2,2,4,3,9} lagPoly\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"3-2.5x+1.5x^2\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestMix()\r\n    {\r\n        String s = check (\"\\\"peter\\\" \\\"doof\\\" mix toStr\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"pdeotoefr\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPowDouble()\r\n    {\r\n        String s = check (\"0.5 10 pow 4 round\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"0.001\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestHexXor()\r\n    {\r\n        String s = check (\"hex 1fff 1 xor\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"1FFE\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestEval()\r\n    {\r\n        String s = check (\"\\\"text='';for(i=0;i<10;i++)text+=3*i+'-';\\\" js\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"0-3-6-9-12-15-18-21-24-27-\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestEval2()\r\n    {\r\n        String s = check (\"\\\"str='Visit_W3Schools';n=str.search(/w3schools/i);\\\" js\",\r\n                \".\");\r\n        System.out.println(s);\r\n        shoudBeOK (\"6\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRWFile()\r\n    {\r\n        check (\"\\\"lala\\\" openWriter \\\"hallo\\\" writeString \\\"_doof\\\" writeString closeWriter\",\r\n                \".\");\r\n        String s = check (\"\\\"lala\\\" openReader readLine swap readLine rot +\",\r\n                \".\");\r\n        shoudBeOK (\"*EOF*hallo_doof\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestZeta()\r\n    {\r\n        String s = check (\"-1 zeta toFraction\",\r\n                \".\");\r\n        shoudBeOK (\"-1/12\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCopySamExe()\r\n    {\r\n        try\r\n        {\r\n            String res = Utilities.extractResource(\"sam.exe\");\r\n            System.out.println(res);\r\n            Process process = new ProcessBuilder(res).start();\r\n            InputStream is = process.getInputStream();\r\n            InputStreamReader isr = new InputStreamReader(is);\r\n            BufferedReader br = new BufferedReader(isr);\r\n            String line;\r\n\r\n            while ((line = br.readLine()) != null)\r\n            {\r\n                System.out.println(line);\r\n            }\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            Assert.fail();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void Test888to6()\r\n    {\r\n        String s = check (\"8 8 + sqrt fact 8 / fact\",\r\n                \".\");\r\n        shoudBeOK (\"6\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestHexStr()\r\n    {\r\n        String s = check (\"{1,2,3,100,200,255} hexStr\",\r\n                \".\");\r\n        shoudBeOK (\"01020364C8FF\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestUnhexStr()\r\n    {\r\n        String s = check (\"\\\"01020364C8FF\\\" unhexStr\",\r\n                \".\");\r\n        shoudBeOK (\"{1,2,3,100,200,255}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestHash()\r\n    {\r\n        String s = check (\"\\\"Hallo\\\" \\\"SHA-1\\\" hash hexStr\",\r\n                \".\");\r\n        shoudBeOK (\"59D9A6DF06B9F610F7DB8E036896ED03662D168F\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestUrlEncSpace()\r\n    {\r\n        String s = check (\"\\\"lala\\\" {32} toStr \\\"dumm\\\" + + urlEnc\",\r\n                \".\");\r\n        shoudBeOK (\"lala+dumm\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCollatz()\r\n    {\r\n        String s = check (\"11 clltz dup length swap sum\",\". .\");\r\n        shoudBeOK (\"25915\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestUDP()\r\n    {\r\n        \r\n        (new Thread(() ->\r\n        {\r\n\r\n            try\r\n            {\r\n                Thread.sleep(2000);\r\n            }\r\n            catch (InterruptedException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            String s = check (\"1000 \\\"hello\\\" udpput\",\"\");\r\n            shoudBeOK (\"\" ,s);\r\n        })).start();\r\n\r\n        String s = check (\"1000 udpget\",\".\");\r\n        shoudBeOK (\"hello\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDlist()\r\n    {\r\n        String s = check (\"1234567890L toDList\",\".\");\r\n        shoudBeOK (\"{1,2,3,4,5,6,7,8,9,0}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDAltsum()\r\n    {\r\n        String s = check (\"3229380809664349823849028340088048L toDList altsum\",\".\");\r\n        shoudBeOK (\"33\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestJava()\r\n    {\r\n        final String source =\r\n                \"\\\"public static double main(double arg) {return func(arg);}\" +\r\n                        \"public static double func(double arg) {return Math.sqrt(arg);}\"+\r\n                        \"\\\"\";\r\n        String s = check (\"56.25 \"+source + \" java\",\".\");\r\n        shoudBeOK (\"7.5\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDotQuote()\r\n    {\r\n        String s = check (\".\\\" hello doof \\\"\",null);\r\n        shoudBeOK (\"hello doof \" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestMultiDots()\r\n    {\r\n        String s = check (\"1 2 3 4 5\",\".....\");\r\n        shoudBeOK (\"54321\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestShift()\r\n    {\r\n        String s = check (\"\\\"peter\\\" >> >> >>\",\".\");\r\n        shoudBeOK (\"terpe\" ,s);\r\n        s = check (\"\\\"peter\\\" << >> <<\",\".\");\r\n        shoudBeOK (\"eterp\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestScatterColl()\r\n    {\r\n        String s = check (\"{1,2,3,4,5,6} scatter\",\".s\");\r\n        shoudBeOK (\"1 2 3 4 5 6 \" ,s);\r\n        s = check (\"1 2 3 4 5 6 collect\",\".\");\r\n        shoudBeOK (\"{1,2,3,4,5,6}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSeqGen()\r\n    {\r\n        String s = check (\"3 6 9 seq\",\".\");\r\n        shoudBeOK (\"{3,12,21,30,39,48}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestIsPrime()\r\n    {\r\n        String s = check (\"7919 isPrime 12 isPrime swap\",\"..\");\r\n        shoudBeOK (\"10\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestB64()\r\n    {\r\n        String s = check (\"\\\"hoelle\\\" b64 dup unb64\",\". sp .\");\r\n        shoudBeOK (\"hoelle aG9lbGxl\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestExecute()\r\n    {\r\n        String s = check (\"' + 6 7 rot execute\",\".\");\r\n        shoudBeOK (\"13\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestTimeView()\r\n    {\r\n        String s = check (\"123456 toTime\",\".\");\r\n        shoudBeOK (\"34:17:36\" ,s);\r\n        s = check (\"34:17:36\",\".\");\r\n        shoudBeOK (\"123456\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestNip()\r\n    {\r\n        String s = check (\"a b c nip\",\".s\");\r\n        shoudBeOK (\"a c \" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestNonStandardRecurse()\r\n    {\r\n        String s = check (\": facky recursive dup 1 > if dup 1- facky * then ;\",\"6 facky .\");\r\n        shoudBeOK (\"720\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestComplex2()\r\n    {\r\n        String s = check (\"3+6i dup phi swap abs 3 round swap 3 round\",\r\n                \". sp .\");\r\n        shoudBeOK (\"1.107 6.708\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestLn()\r\n    {\r\n        String s = check (\"-1 ln 99 +\",\r\n                \".\");\r\n        shoudBeOK (\"99+3.141592653589793i\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestFracRedux()\r\n    {\r\n        String s = check (\"2/4 4/8 +\",\r\n                \".\");\r\n        shoudBeOK (\"1\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestEulerIdentity()\r\n    {\r\n        String s = check (\"0+1i pi * exp 3 round\", \".\");\r\n        shoudBeOK (\"-1\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void Test4PowI()\r\n    {\r\n        String s = check (\"2 ln 1i * 2 * exp 4 1i pow =\", \".\");\r\n        shoudBeOK (\"1\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStringMult()\r\n    {\r\n        String s = check (\"la 2 * 3 ku * +\", \".\");\r\n        shoudBeOK (\"lalakukuku\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCGroup()\r\n    {\r\n        String s = check (\"7 11 cgroup\", \".\");\r\n        shoudBeOK (\"{7,5,2,3,10,4,6,9,8,1}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCGroupInverseAndEquality()\r\n    {\r\n        String s = check (\"7 11 cgroup dup 11 igroup dup rot dup rot swap =\", \". . .\");\r\n        shoudBeOK (\"1{7,5,2,3,10,4,6,9,8,1}{8,9,6,4,10,3,2,5,7,1}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestCTab()\r\n    {\r\n        String s = check (\"5 ctab\", \".\");\r\n        shoudBeOK (\"{{1,2,3,4}{2,4,1,3}{3,1,4,2}{4,3,2,1}}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestIntersectNlist()\r\n    {\r\n        String s = check (\"{1,2,3,4} {1,2,4} intersect\", \".\");\r\n        shoudBeOK (\"{1,2,4}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestIntersectSlist()\r\n    {\r\n        String s = check (\"{a,b,c} {d,e,a} intersect\", \".\");\r\n        shoudBeOK (\"{\\\"a\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestPick()\r\n    {\r\n        String s = check (\"{peter,ist,lieb,oder,doof} 2 lpick\", \".\");\r\n        shoudBeOK (\"lieb\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void UniqTest()\r\n    {\r\n        String s = check (\"{a,s,a,s,d,a,s} unique\", \".\");\r\n        shoudBeOK (\"{\\\"a\\\",\\\"s\\\",\\\"d\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRotateNumSeq()\r\n    {\r\n        String s = check (\"{1,2,3} << {1,2,3} >>\", \"..\");\r\n        shoudBeOK (\"{3,1,2}{2,3,1}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRotateStrSeq()\r\n    {\r\n        String s = check (\"{a,f,g,j} << {j,o,7,laal} >>\", \"..\");\r\n        shoudBeOK (\"{\\\"laal\\\",\\\"j\\\",\\\"o\\\",\\\"7\\\"}{\\\"f\\\",\\\"g\\\",\\\"j\\\",\\\"a\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestDivToStrSeq()\r\n    {\r\n        String s = check (\"laladumm 2 /\", \".\");\r\n        shoudBeOK (\"{\\\"la\\\",\\\"la\\\",\\\"du\\\",\\\"mm\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStrSeqFact()\r\n    {\r\n        String s = check (\"\\\"peter       ist    lieb\\\" factor\", \".\");\r\n        shoudBeOK (\"{\\\"peter\\\",\\\"ist\\\",\\\"lieb\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStrSeqPlus()\r\n    {\r\n        String s = check (\"{a,b,c,d} peter +\", \".\");\r\n        shoudBeOK (\"{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"peter\\\"}\" ,s);\r\n        s = check (\"peter {a,b,c,f} +\", \".\");\r\n        shoudBeOK (\"{\\\"peter\\\",\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"f\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStrSeqSubX()\r\n    {\r\n        String s = check (\"peter 1 / {e,t} - toStr\", \".\");\r\n        shoudBeOK (\"pr\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestListConv()\r\n    {\r\n        String s = check (\"{1,3,3,4.5,6} dup toSList type swap type\", \". sp .\");\r\n        shoudBeOK (\"DoubleSequence StringSequence\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSListPermute()\r\n    {\r\n        String s = check (\"peter 1 / 12 permute toStr\", \".\");\r\n        shoudBeOK (\"trpee\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestSListSpc()\r\n    {\r\n        String s = check (\"\\\"fick dich\\\" toslist\", \".\");\r\n        shoudBeOK (\"{\\\"fick\\\",\\\"dich\\\"}\" ,s);\r\n        s = check (\"\\\"fickdich\\\" toslist\", \".\");\r\n        shoudBeOK (\"{\\\"f\\\",\\\"i\\\",\\\"c\\\",\\\"k\\\",\\\"d\\\",\\\"i\\\",\\\"c\\\",\\\"h\\\"}\" ,s);\r\n        s = check (\"fickdich toslist\", \".\");\r\n        shoudBeOK (\"{\\\"f\\\",\\\"i\\\",\\\"c\\\",\\\"k\\\",\\\"d\\\",\\\"i\\\",\\\"c\\\",\\\"h\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestStringSplit()\r\n    {\r\n        String s = check (\"\\\"move back mo'fucker the onyx is here\\\" toslist\", \".\");\r\n        shoudBeOK (\"{\\\"move\\\",\\\"back\\\",\\\"mo'fucker\\\",\\\"the\\\",\\\"onyx\\\",\\\"is\\\",\\\"here\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestLswap()\r\n    {\r\n        String s = check (\"{a,b,c,d,r} 1 2 lswap dup type\", \"..\");\r\n        shoudBeOK (\"StringSequence{\\\"a\\\",\\\"c\\\",\\\"b\\\",\\\"d\\\",\\\"r\\\"}\" ,s);\r\n        s = check (\"{1,2,3,4,5} 1 2 lswap dup type\", \"..\");\r\n        shoudBeOK (\"DoubleSequence{1,3,2,4,5}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestRev()\r\n    {\r\n        String s = check (\"\\\"hello world\\\" rev\", \".\");\r\n        shoudBeOK (\"dlrow olleh\" ,s);\r\n        s = check (\"{1,2,3,4,5} rev\", \".\");\r\n        shoudBeOK (\"{5,4,3,2,1}\" ,s);\r\n        s = check (\"{gone,wild,man} rev\", \".\");\r\n        shoudBeOK (\"{\\\"man\\\",\\\"wild\\\",\\\"gone\\\"}\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void TestLSystem()\r\n    {\r\n        String s = check (\"ABA lsput A->AB lsrule B->A lsrule lsget\", \".\");\r\n        shoudBeOK (\"ABAAB\" ,s);\r\n        s = check (\"ABA lsput A->AB lsrule B->A lsrule lsclr lsget\", \".\");\r\n        shoudBeOK (\"ABA\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void StrSortRev()\r\n    {\r\n        String s = check (\"move_back_motherfucker sort rev\", \".\");\r\n        shoudBeOK (\"vutrroommkkhfeeeccba__\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void percTest()\r\n    {\r\n        String s = check (\"12345 25 percent 12345 swap whatperc\", \".\");\r\n        shoudBeOK (\"25\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void typeTest()\r\n    {\r\n        String s = check (\"33 type 33L type 33/1 type 33.0 type 33+0i type {33} type {{33}} type\",\r\n                \".......\");\r\n        shoudBeOK (\"DoubleMatrixDoubleSequenceComplexDoubleFractionBigIntegerLong\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void strSubNumTest()\r\n    {\r\n        String s = check (\"laladumm 4 -\",\r\n                \".\");\r\n        shoudBeOK (\"lala\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void strSubStrTest()\r\n    {\r\n        String s = check (\"peter lieb -\",\r\n                \".\");\r\n        shoudBeOK (\"ptr\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void morseTest()\r\n    {\r\n        String s = check (\"\\\"hello world\\\" morsetxt\",\r\n                \".\");\r\n        shoudBeOK (\"···· · ·-·· ·-·· ---  ·-- --- ·-· ·-·· -··\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void soundTest()\r\n    {\r\n        check (\"1234 dtmf abcd dtmf sos morse c4c5c6c7 tune 1000 300 beep 1000 200 beep\", \".\");\r\n    }\r\n\r\n    @Test\r\n    public void binHexInputTest()\r\n    {\r\n        String s = check (\"0xc000 _ 0b1001\",\"...\");\r\n        shoudBeOK (\"9_49152\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void binStrTest()\r\n    {\r\n        String s = check (\"1234 dup binstr swap \\\"-\\\" swap hexstr\",\"...\");\r\n        shoudBeOK (\"4d2-10011010010\" ,s);\r\n    }\r\n\r\n    @Test\r\n    public void commentTest()\r\n    {\r\n        String s = check (\"1234 ( a comment ) dup ( next comm.) +\",\".\");\r\n        shoudBeOK (\"2468\" ,s);\r\n        s = check (\"1234 \\\\ some other bullshitt\",\".\");\r\n        shoudBeOK (\"1234\" ,s);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Test/TestCases.java	(revision 96fd9775f4c5987a9bd39b22dfe9988642d151e4)
+++ Test/TestCases.java	(date 1600884747103)
@@ -426,6 +426,16 @@
         shoudBeOK ("1098765          lala" ,s);
     }
 
+    @Test
+    public void TestNested()
+    {
+        String s = check (": NESTED cr 0 do dup  0 do cr j . i . loop loop drop ;",
+                "3 4 NESTED");
+        System.out.println(s);
+        shoudBeOK ("\r\n\r\n00\r\n01\r\n02\r\n10\r\n11\r\n12\r\n20\r\n21\r\n22\r\n30\r\n31\r\n32" ,s);
+    }
+
+
     @Test
     public void TestAddFractions()
     {
@@ -626,6 +636,14 @@
         shoudBeOK ("59D9A6DF06B9F610F7DB8E036896ED03662D168F" ,s);
     }
 
+    @Test
+    public void TestCRC()
+    {
+        String s = check ("hallo dup crc16 hash swap crc32 hash _ swap",
+                "...");
+        shoudBeOK ("3111268817_1235" ,s);
+    }
+
     @Test
     public void TestUrlEncSpace()
     {
@@ -644,7 +662,7 @@
     @Test
     public void TestUDP()
     {
-        
+
         (new Thread(() ->
         {
 
@@ -1046,4 +1064,11 @@
         shoudBeOK ("1234" ,s);
     }
 
+    @Test
+    public void brainFuckTest()
+    {
+        String code = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.";
+        String s = check ("\""+code+"\""+" bf",".");
+        shoudBeOK ("Hello World!\n" ,s);
+    }
 }
